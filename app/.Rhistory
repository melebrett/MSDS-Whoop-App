recovery_date = as.Date(recovery_date),
day_of_week = weekdays(recovery_date),
across(c(contains("sleep_time")),~./(3.6*10**6)),
`+/- recovery` = recovery_score - pred_recovery_score
) %>%
arrange(desc(recovery_date)) %>%
slice_head(n=30) %>%
ggplot() +
geom_bar(aes(x = recovery_date, y= recovery_score, fill = recovery_score), stat = "identity") +
geom_point(aes(x=recovery_date, y = pred_recovery_score), color = 'red', size = 2) +
scale_fill_paletteer_c("grDevices::RdYlGn") +
theme_bw()
main_recovery_table <- function(interval){
recovery_df %>%
ungroup() %>%
mutate(
recovery_date = as.Date(recovery_date),
day_of_week = weekdays(recovery_date),
across(c(contains("sleep_time")),~./(3.6*10**6)),
`+/- recovery` = recovery_score - pred_recovery_score
) %>%
arrange(desc(recovery_date)) %>%
slice_head(n=interval) %>%
ggplot() +
geom_bar(aes(x = recovery_date, y= recovery_score, fill = recovery_score), stat = "identity") +
geom_point(aes(x=recovery_date, y = pred_recovery_score), color = 'red', size = 2) +
scale_fill_paletteer_c("grDevices::RdYlGn") +
theme_bw()
}
runApp('NU-MSDS/MSDS434/MSDS-434-Final/app')
runApp('NU-MSDS/MSDS434/MSDS-434-Final/app')
df <- bq_project_query(project_id, sql)
df <- bq_table_download(df)
df<- df %>%
mutate(
na_workout = ifelse(is.na(y_workout_strain),1,0),
na_acr = ifelse(is.na(acute_chronic_strain),1,0)
)
recovery_df <- df %>%
group_by(day_of_week) %>%
mutate(
across(all_of(workout_cols),~coalesce(.,min(.,na.rm=T))),
across(starts_with('y_'),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.)),
across(c(starts_with('w_')),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.))
)
main_input_data <- recovery_df %>%
dplyr::select(all_of(other_cols_recovery),
all_of(same_day_sleep_cols),
all_of(yesterday_sleep_cols),
all_of(yesterday_strain_cols),
all_of(yesterday_workout_cols),
all_of(weekly_avgs)) %>%
as.matrix(dimnames = "colnames")
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
jsonlite::fromJSON(rawToChar(main_resp$content))$predictions
rawToChar(main_resp$content)
access_token <- sh("gcloud auth print-access-token", intern = TRUE)
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
jsonlite::fromJSON(rawToChar(main_resp$content))$predictions
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
jsonlite::fromJSON(rawToChar(main_resp$content))$predictions
recovery_df %>%
dplyr::select(all_of(other_cols_recovery),
all_of(same_day_sleep_cols),
all_of(yesterday_sleep_cols),
all_of(yesterday_strain_cols),
all_of(yesterday_workout_cols),
all_of(weekly_avgs)) %>%
mutate_all(scale)
recovery_df <- df %>%
group_by(day_of_week) %>%
mutate(
across(all_of(workout_cols),~coalesce(.,min(.,na.rm=T))),
across(starts_with('y_'),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.)),
across(c(starts_with('w_')),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.))
)
recovery_df %>%
dplyr::select(all_of(other_cols_recovery),
all_of(same_day_sleep_cols),
all_of(yesterday_sleep_cols),
all_of(yesterday_strain_cols),
all_of(yesterday_workout_cols),
all_of(weekly_avgs)) %>%
mutate_all(scale)
recovery_df %>%
dplyr::select(all_of(other_cols_recovery),
all_of(same_day_sleep_cols),
all_of(yesterday_sleep_cols),
all_of(yesterday_strain_cols),
all_of(yesterday_workout_cols),
all_of(weekly_avgs))
recovery_df %>%
dplyr::select(all_of(other_cols_recovery),
all_of(same_day_sleep_cols),
all_of(yesterday_sleep_cols),
all_of(yesterday_strain_cols),
all_of(yesterday_workout_cols),
all_of(weekly_avgs)) %>%
mutate_all(as.numeric(scale))
recovery_df %>%
dplyr::select(all_of(other_cols_recovery),
all_of(same_day_sleep_cols),
all_of(yesterday_sleep_cols),
all_of(yesterday_strain_cols),
all_of(yesterday_workout_cols),
all_of(weekly_avgs)) %>%
mutate_all(~as.numeric(scale(.)))
recovery_df %>%
dplyr::select(all_of(other_cols_recovery),
all_of(same_day_sleep_cols),
all_of(yesterday_sleep_cols),
all_of(yesterday_strain_cols),
all_of(yesterday_workout_cols),
all_of(weekly_avgs))
recovery_df <- df %>%
group_by(day_of_week) %>%
mutate(
across(all_of(workout_cols),~coalesce(.,min(.,na.rm=T))),
across(starts_with('y_'),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.)),
across(c(starts_with('w_')),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.))
)
main_input_data <- recovery_df %>%
dplyr::select(all_of(other_cols_recovery),
all_of(same_day_sleep_cols),
all_of(yesterday_sleep_cols),
all_of(yesterday_strain_cols),
all_of(yesterday_workout_cols),
all_of(weekly_avgs)) %>%
as.matrix(dimnames = "colnames")
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
jsonlite::fromJSON(rawToChar(main_resp$content))$predictions
main_input_data
project_id <- "msds434-whoop-app"
access_token <- sh("gcloud auth print-access-token", intern = TRUE)
sql <- "select * from `whoopdataset.whoopmerge`"
recovery_url <- str_glue("https://us-east1-aiplatform.googleapis.com/v1/projects/msds434-whoop-app/locations/us-east1/endpoints/{recovery_model}:predict")
df <- bq_project_query(project_id, sql)
df <- bq_table_download(df)
df<- df %>%
mutate(
na_workout = ifelse(is.na(y_workout_strain),1,0),
na_acr = ifelse(is.na(acute_chronic_strain),1,0)
)
recovery_df <- df %>%
group_by(day_of_week) %>%
mutate(
across(all_of(workout_cols),~coalesce(.,min(.,na.rm=T))),
across(starts_with('y_'),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.)),
across(c(starts_with('w_')),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.))
)
main_input_data <- recovery_df %>%
dplyr::select(all_of(other_cols_recovery),
all_of(same_day_sleep_cols),
all_of(yesterday_sleep_cols),
all_of(yesterday_strain_cols),
all_of(yesterday_workout_cols),
all_of(weekly_avgs)) %>%
as.matrix(dimnames = "colnames")
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
jsonlite::fromJSON(rawToChar(main_resp$content))$predictions
main_input_data
features_recovery <- c('y_sleep_performance_perc', 'na_workout', 'w_slow_wave_sleep_time',
'y_max_heart_rate', 'y_slow_wave_sleep_time', 'y_zone_thee',
'y_zone_two', 'y_kilojoule', 'y_respiratory_rate',
'slow_wave_sleep_time', 'y_zone_four', 'w_rem_sleep_time',
'y_light_sleep_time', 'disturbance_count', 'y_zone_one',
'y_total_sleep_time', 'na_acr', 'day_of_week', 'sleep_start_time',
'y_sleep_consistency_perc', 'w_recovery_score',
'y_workout_max_heart_rate', 'y_sleep_efficiency_perc', 'y_zone_five',
'w_sleep_start_time_sd', 'y_workout_kilojoule', 'y_rem_sleep_time',
'light_sleep_time', 'acute_chronic_strain', 'respiratory_rate',
'y_workout_start_time', 'w_light_sleep_time', 'week_of_year',
'w_hrv_milli', 'rem_sleep_time', 'y_disturbance_count',
'y_avg_heart_rate', 'w_strain', 'y_strain', 'sleep_cycle_count',
'y_sleep_cycle_count', 'w_resting_heart_rate')
main_input_data <- recovery_df %>%
# dplyr::select(all_of(other_cols_recovery),
#               all_of(same_day_sleep_cols),
#               all_of(yesterday_sleep_cols),
#               all_of(yesterday_strain_cols),
#               all_of(yesterday_workout_cols),
#               all_of(weekly_avgs)) %>%
dplyr::select(features_recovery) %>%
as.matrix(dimnames = "colnames")
main_input_data <- recovery_df %>%
# dplyr::select(all_of(other_cols_recovery),
#               all_of(same_day_sleep_cols),
#               all_of(yesterday_sleep_cols),
#               all_of(yesterday_strain_cols),
#               all_of(yesterday_workout_cols),
#               all_of(weekly_avgs)) %>%
dplyr::select(all_of(features_recovery)) %>%
as.matrix(dimnames = "colnames")
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
jsonlite::fromJSON(rawToChar(main_resp$content))$predictions
runApp('NU-MSDS/MSDS434/MSDS-434-Final/app')
getwd()
setwd("~/NU-MSDS/MSDS434/MSDS-434-Final/app")
# install.packages("renv")
directory_depends <- renv::dependencies(dev=T)[2]$Package
packages <- installed.packages()
packages <- packages[which(rownames(installed.packages()) %in% directory_depends),]
packages[,"Version"]
installs <- c()
for(i in 1:length(packages[,"Version"])){
pkg <- names(packages[,"Version"][i])
version <- packages[,"Version"][[i]]
cmd <- paste(
"remotes::install_version('",
pkg,
"', version = '",
version,
"')",
sep = ""
)
installs <- append(installs,cmd)
}
file <- file("install_pkgs.txt")
writeLines(installs,file)
close(file)
# install.packages("renv")
directory_depends <- renv::dependencies(dev=T)[2]$Package
packages <- installed.packages()
packages <- packages[which(rownames(installed.packages()) %in% directory_depends),]
packages[,"Version"]
installs <- c()
for(i in 1:length(packages[,"Version"])){
pkg <- names(packages[,"Version"][i])
version <- packages[,"Version"][[i]]
cmd <- paste(
"RUN R -e \"remotes::install_version('",
pkg,
"', version = ' \"",
version,
"')",
sep = ""
)
installs <- append(installs,cmd)
}
file <- file("install_pkgs.txt")
writeLines(installs,file)
close(file)
# install.packages("renv")
directory_depends <- renv::dependencies(dev=T)[2]$Package
packages <- installed.packages()
packages <- packages[which(rownames(installed.packages()) %in% directory_depends),]
packages[,"Version"]
installs <- c()
for(i in 1:length(packages[,"Version"])){
pkg <- names(packages[,"Version"][i])
version <- packages[,"Version"][[i]]
cmd <- paste(
"RUN R -e \"remotes::install_version('",
pkg,
"', version = '",
version,
"') \"",
sep = ""
)
installs <- append(installs,cmd)
}
file <- file("install_pkgs.txt")
writeLines(installs,file)
close(file)
# install.packages("renv")
directory_depends <- renv::dependencies(dev=T)[2]$Package
packages <- installed.packages()
packages <- packages[which(rownames(installed.packages()) %in% directory_depends),]
packages[,"Version"]
installs <- c()
for(i in 1:length(packages[,"Version"])){
pkg <- names(packages[,"Version"][i])
version <- packages[,"Version"][[i]]
cmd <- paste(
"RUN R -e \"remotes::install_version('",
pkg,
"', version = '",
version,
"')\"",
sep = ""
)
installs <- append(installs,cmd)
}
file <- file("install_pkgs.txt")
writeLines(installs,file)
close(file)
getwd()
renv::init()
runApp()
getwd()
library(googleAuthR)
googleAuthR::gar_set_client(scopes = "https://www.googleapis.com/auth/cloud-platform")
googleAuthR::gar_scope_config()
googleAuthR::gar_oauth_app()
gar_auth()
gar_auth(email = "whoopsvc@msds434-whoop-app.iam.gserviceaccount.com" )
options(googleAuthR.client_id)
gar_token()
googleAuthR::gar_set_client(scopes = "https://www.googleapis.com/auth/vartexai")
googleAuthR::gar_set_client(scopes = "https://www.googleapis.com/auth/vartexiai")
options(googleAuthR.scopes.selected = c("https://www.googleapis.com/auth/vertex-ai"))
token <- gar_auth()
install.packages("googleComputeEngineR")
install.packages("googleComputeEngineR")
library(googleComputeEngineR)
gar_gce_auth()
gar_token()
gar_token()
gar_token(client_id = 113096568580712060307, "https://accounts.google.com/o/oauth2/auth")
gar_token(client_id = 113096568580712060307)
gar_token(client_id = 113096568580712060307)
gar_auth_service("../../msds434-whoop-app-44384939c1f4.json")
getwd()
token <- httr::oauth2.0_token(
endpoint = NULL,
app = httr::oauth_app(),
scope = "https://www.googleapis.com/auth/cloud-platform",
use_oob = FALSE,
token = NULL,
config = list(
client_id = 113096568580712060307,
client_secret = "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCT2IpFJP0Etig9\nMZmJyBeHbIMZ5I0/zagAuC0rk9DzgI9LFU6Nfx260b0MCB338coC4wXsQcdYWcel\nUm3hEwdvK6tnJI6j13IH2vISCG1qFVcM/rvIFudE5u+3G7cptn9BUDpd0tZoAB74\nbe25klS59uUOybK7COxSi7lLgHtnUc/oy73v6EKV6yXOS3GdzH+DFb0kUPCipWL3\nNnSS4db+QACWFeqhVuSx9naww7J8ncOjhd1/hFf3A6lswQctpIl+p2UzQyv/Jo4A\ndgMKsYSIVWEPHH4QFtNP+03bh6Xu8bcY3b7RiTSwvFi9DkaQEQdEdvMYRqXDt78a\ncUf508d7AgMBAAECggEAOIZ7Qvlj1UfRtae/hJqgSFIYA6/Kw0CdQX0pI/aVVmvq\nHTJNwLJ/itxCs5Vs482pRxZGPvBdR22384DC6uEsH/hpxXsIICMwgUlX8MYRExSK\nnjjMUbFUBZdnwjHSAxw3piCG2DVSbRvSu3fIAoGsbBc1t0QtVe4Q8HRkSTYbuEHN\n/AQeSbwC16n085OsOaY/qiv3ysPoNIWMwI0vB/4Y4AC/KgFBEX6O6Qa6zBtzBXWm\nvJM3gATkxwG74rFXsy6lAX51SpvfaKCn2hfjKt9zPSBYuOo4qUEi5psz7kUGBYEv\nrwW05xtq5MSsDMCx/9JM99+iymZCyHrTC8y/otIBYQKBgQDFr20xBUzbQ7k68z8s\nQnnNERqauNmhpXs5wqidE4X3iC3wt4n80H+DhWWPG3oDLBg61Me0zVFE8tnsqKnq\nZwLbif02fnrZXKABqsF3DCfqOSnffmEUIjJRHKGDySO6po5wV82ncDJbPoW2mSLw\nWhId+nuP3rvnTifRa9CJdeHy4QKBgQC/dWXSYKpdj+g8qs657apLKx16nWjNA+Zv\ndKp0EeDWTPyzq1sJArqtGFcZYc1jwux3v4ZzVAVoImUOzvqrbJTQg1Q25kLmZZyY\nsybbKEhYolmciQtgKtFv6Otj4KJpti004fUSz2CQz+61SuzI9PT6PLBP44+gNFoI\nsxG6gnoh2wKBgBdfv7RtIQJIBq3Otyh/j7FMlW2375uqWmChAJjaBxwWkQAGY51t\n9bXSXwjFwe6AFzlVkWtyX2qcoGHYK4cYuQDGVxdLazEqP40S6J8v48RRD/9qDQZ5\naKOok/xmGwBl0y+7YgirPnkFcn/9qWDr9Xpv9I41UthtqE2dxuGJ+7ZhAoGAeEd0\nlFoOLYE+0P4tqTjaBycq+eDx+fo9Rj/w5cJlkbwD9YvtQRfp1ty3u0ZqFgZbME+u\nU72xN96Dxm3ZpOAuDWC0A1ldJgkn+/ZwrrX73VMBIQonj17W/ItDdhelcOv2MobR\nw+NsMw2uVU6guw7I6Hw/97Bqhqbc+SImPRnDSIkCgYB3PfWm+qZXS6ogBX4Arl+7\nOpiedLMaeFKszLg6FU4exDZR0L7MkIMIRLv74SsJB7nqIAVfJSt+j0G2uMVeisu+\noCP++S6gwCZRdYqdzJ3ZLRjKs51cd9JsNRXywqeUzUmyPE2HgkIpUV3WdUSSoJsd\n83i9HEMN0ADf9gkpUzVB8g==",
token_uri = "https://oauth2.googleapis.com/token"
)
)
token <- httr::oauth2.0_token(
app = httr::oauth_app(),
scope = "https://www.googleapis.com/auth/cloud-platform",
config = list(
client_id = 113096568580712060307,
client_secret = "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCT2IpFJP0Etig9\nMZmJyBeHbIMZ5I0/zagAuC0rk9DzgI9LFU6Nfx260b0MCB338coC4wXsQcdYWcel\nUm3hEwdvK6tnJI6j13IH2vISCG1qFVcM/rvIFudE5u+3G7cptn9BUDpd0tZoAB74\nbe25klS59uUOybK7COxSi7lLgHtnUc/oy73v6EKV6yXOS3GdzH+DFb0kUPCipWL3\nNnSS4db+QACWFeqhVuSx9naww7J8ncOjhd1/hFf3A6lswQctpIl+p2UzQyv/Jo4A\ndgMKsYSIVWEPHH4QFtNP+03bh6Xu8bcY3b7RiTSwvFi9DkaQEQdEdvMYRqXDt78a\ncUf508d7AgMBAAECggEAOIZ7Qvlj1UfRtae/hJqgSFIYA6/Kw0CdQX0pI/aVVmvq\nHTJNwLJ/itxCs5Vs482pRxZGPvBdR22384DC6uEsH/hpxXsIICMwgUlX8MYRExSK\nnjjMUbFUBZdnwjHSAxw3piCG2DVSbRvSu3fIAoGsbBc1t0QtVe4Q8HRkSTYbuEHN\n/AQeSbwC16n085OsOaY/qiv3ysPoNIWMwI0vB/4Y4AC/KgFBEX6O6Qa6zBtzBXWm\nvJM3gATkxwG74rFXsy6lAX51SpvfaKCn2hfjKt9zPSBYuOo4qUEi5psz7kUGBYEv\nrwW05xtq5MSsDMCx/9JM99+iymZCyHrTC8y/otIBYQKBgQDFr20xBUzbQ7k68z8s\nQnnNERqauNmhpXs5wqidE4X3iC3wt4n80H+DhWWPG3oDLBg61Me0zVFE8tnsqKnq\nZwLbif02fnrZXKABqsF3DCfqOSnffmEUIjJRHKGDySO6po5wV82ncDJbPoW2mSLw\nWhId+nuP3rvnTifRa9CJdeHy4QKBgQC/dWXSYKpdj+g8qs657apLKx16nWjNA+Zv\ndKp0EeDWTPyzq1sJArqtGFcZYc1jwux3v4ZzVAVoImUOzvqrbJTQg1Q25kLmZZyY\nsybbKEhYolmciQtgKtFv6Otj4KJpti004fUSz2CQz+61SuzI9PT6PLBP44+gNFoI\nsxG6gnoh2wKBgBdfv7RtIQJIBq3Otyh/j7FMlW2375uqWmChAJjaBxwWkQAGY51t\n9bXSXwjFwe6AFzlVkWtyX2qcoGHYK4cYuQDGVxdLazEqP40S6J8v48RRD/9qDQZ5\naKOok/xmGwBl0y+7YgirPnkFcn/9qWDr9Xpv9I41UthtqE2dxuGJ+7ZhAoGAeEd0\nlFoOLYE+0P4tqTjaBycq+eDx+fo9Rj/w5cJlkbwD9YvtQRfp1ty3u0ZqFgZbME+u\nU72xN96Dxm3ZpOAuDWC0A1ldJgkn+/ZwrrX73VMBIQonj17W/ItDdhelcOv2MobR\nw+NsMw2uVU6guw7I6Hw/97Bqhqbc+SImPRnDSIkCgYB3PfWm+qZXS6ogBX4Arl+7\nOpiedLMaeFKszLg6FU4exDZR0L7MkIMIRLv74SsJB7nqIAVfJSt+j0G2uMVeisu+\noCP++S6gwCZRdYqdzJ3ZLRjKs51cd9JsNRXywqeUzUmyPE2HgkIpUV3WdUSSoJsd\n83i9HEMN0ADf9gkpUzVB8g==",
token_uri = "https://oauth2.googleapis.com/token"
)
)
library(gargle)
token_fetch()
gargle_api_key()
print(gargle_api_key())
library(shiny)
library(shinyWidgets)
library(shinycssloaders)
library(shinyjs)
library(bigrquery)
library(dplyr)
library(tidyr)
library(stringr)
library(httr)
library(jsonlite)
library(paletteer)
library(gt)
library(gtExtras)
library(glue)
library(IRdisplay)
library(ggplot2)
# access_token <- sh("gcloud auth print-access-token", intern = TRUE)
access_tokeng <- gargle_api_key()
sql <- "select * from `whoopdataset.whoopmerge`"
recovery_model <- 5990825443379380224
# hrv_model <- 4989337476242866176
strain_model <- 3482320450934013952
recovery_url <- str_glue("https://us-east1-aiplatform.googleapis.com/v1/projects/msds434-whoop-app/locations/us-east1/endpoints/{recovery_model}:predict")
workout_url <- str_glue("https://us-east1-aiplatform.googleapis.com/v1/projects/msds434-whoop-app/locations/us-east1/endpoints/{strain_model}:predict")
workout_cols = c('acute_chronic_strain', 'workout_strain', 'workout_average_heart_rate','workout_max_heart_rate','workout_kilojoule','zone_one','zone_two','zone_thee','zone_four','zone_five',
'y_workout_strain', 'y_workout_average_heart_rate','y_workout_max_heart_rate','y_workout_kilojoule','y_zone_one','y_zone_two','y_zone_thee','y_zone_four','y_zone_five')
same_day_sleep_cols = c('sleep_start_time','light_sleep_time', 'slow_wave_sleep_time','rem_sleep_time','sleep_cycle_count','disturbance_count','respiratory_rate')
yesterday_sleep_cols = c('y_total_sleep_time', 'y_light_sleep_time', 'y_slow_wave_sleep_time','y_rem_sleep_time','y_sleep_cycle_count','y_disturbance_count','y_respiratory_rate', 'y_sleep_performance_perc', 'y_sleep_consistency_perc','y_sleep_efficiency_perc')
yesterday_strain_cols = c('y_kilojoule','y_strain', 'y_avg_heart_rate','y_max_heart_rate')
yesterday_workout_cols = c('y_workout_start_time','y_workout_max_heart_rate', 'y_workout_max_heart_rate','y_workout_kilojoule','y_zone_one','y_zone_two','y_zone_thee','y_zone_four','y_zone_five')
weekly_avgs = c('acute_chronic_strain', 'w_strain','w_sleep_start_time_sd','w_slow_wave_sleep_time','w_light_sleep_time','w_rem_sleep_time','w_recovery_score','w_hrv_milli','w_resting_heart_rate')
other_cols_recovery = c('week_of_year','day_of_week','na_acr','na_workout', 'sleep_start_time')
other_cols_workout = c('recovery_score','hrv_milli', 'day_of_week', 'na_workout')
other_cols_hrv = c('recovery_score', 'week_of_year','day_of_week','na_acr','na_workout', 'sleep_start_time')
df <- bq_project_query(project_id, sql)
project_id <- "msds434-whoop-app"
df <- bq_project_query(project_id, sql)
df <- bq_table_download(df)
df<- df %>%
mutate(
na_workout = ifelse(is.na(y_workout_strain),1,0),
na_acr = ifelse(is.na(acute_chronic_strain),1,0)
)
recovery_df <- df %>%
group_by(day_of_week) %>%
mutate(
across(all_of(workout_cols),~coalesce(.,min(.,na.rm=T))),
across(starts_with('y_'),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.)),
across(c(starts_with('w_')),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.))
)
features_recovery <- c('y_sleep_performance_perc', 'na_workout', 'w_slow_wave_sleep_time',
'y_max_heart_rate', 'y_slow_wave_sleep_time', 'y_zone_thee',
'y_zone_two', 'y_kilojoule', 'y_respiratory_rate',
'slow_wave_sleep_time', 'y_zone_four', 'w_rem_sleep_time',
'y_light_sleep_time', 'disturbance_count', 'y_zone_one',
'y_total_sleep_time', 'na_acr', 'day_of_week', 'sleep_start_time',
'y_sleep_consistency_perc', 'w_recovery_score',
'y_workout_max_heart_rate', 'y_sleep_efficiency_perc', 'y_zone_five',
'w_sleep_start_time_sd', 'y_workout_kilojoule', 'y_rem_sleep_time',
'light_sleep_time', 'acute_chronic_strain', 'respiratory_rate',
'y_workout_start_time', 'w_light_sleep_time', 'week_of_year',
'w_hrv_milli', 'rem_sleep_time', 'y_disturbance_count',
'y_avg_heart_rate', 'w_strain', 'y_strain', 'sleep_cycle_count',
'y_sleep_cycle_count', 'w_resting_heart_rate')
main_input_data <- recovery_df %>%
dplyr::select(all_of(features_recovery)) %>%
as.matrix(dimnames = "colnames")
workout_df <- df %>%
group_by(day_of_week) %>%
mutate(
across(all_of(workout_cols),~coalesce(.,min(.,na.rm=T))),
across(starts_with('y_'),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.)),
across(c(starts_with('w_')),~ifelse(is.numeric(.),coalesce(.,median(.,na.rm=T)),.))
)
features_workout <- c(
'y_sleep_performance_perc', 'w_slow_wave_sleep_time',
'y_max_heart_rate', 'y_slow_wave_sleep_time', 'y_zone_thee',
'y_zone_two', 'y_kilojoule', 'y_respiratory_rate',
'slow_wave_sleep_time', 'y_zone_four', 'w_rem_sleep_time',
'y_light_sleep_time', 'disturbance_count', 'y_zone_one',
'y_total_sleep_time', 'day_of_week', 'sleep_start_time',
'y_sleep_consistency_perc', 'w_recovery_score',
'y_workout_max_heart_rate', 'y_sleep_efficiency_perc',
'y_zone_five', 'w_sleep_start_time_sd', 'y_workout_kilojoule',
'y_rem_sleep_time', 'light_sleep_time', 'hrv_milli',
'acute_chronic_strain', 'respiratory_rate', 'recovery_score',
'y_workout_start_time', 'w_light_sleep_time', 'w_hrv_milli',
'rem_sleep_time', 'y_disturbance_count', 'y_avg_heart_rate',
'w_strain', 'y_strain', 'sleep_cycle_count', 'y_sleep_cycle_count',
'w_resting_heart_rate'
)
main_input_data_workouts <- workout_df %>%
dplyr::select(all_of(features_workout)) %>%
as.matrix(dimnames = "colnames")
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
# access_token <- sh("gcloud auth print-access-token", intern = TRUE)
access_token <- gargle_api_key()
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
rawToChar(main_resp$content)
access_token <- credentials_user_oauth2(scopes = "https://www.googleapis.com/auth/cloud-platform")
access_token
gargle2.0_token()
token_fetch()
token_fetch("apisvckey.json")
getwd()
token_fetch(scopes = "https://www.googleapis.com/auth/cloud-platform", apisvckey.json)
token <- token_fetch(scopes = "https://www.googleapis.com/auth/cloud-platform", apisvckey.json)
token
token$credentials
access_token <- token$credentials$access_token
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
recovery_df$pred_recovery_score <- jsonlite::fromJSON(rawToChar(main_resp$content)
jsonlite::fromJSON(rawToChar(main_resp$content))
token <- token_fetch(scopes = "https://www.googleapis.com/auth/cloud-platform", "apisvckey.json")
token
ken$credentials$access_token
token$credentials$access_token
renv::init()
runApp()
tokens <- token_fetch(scopes = "https://www.googleapis.com/auth/cloud-platform", "apisvckey.json")
access_token <- tokens$credentials$access_token
access_token
main_resp <- httr::POST(
url = recovery_url,
body = jsonlite::toJSON(list(instances = main_input_data)),
add_headers(Authorization = paste("Bearer", access_token),
content_type="application/json")
)
jsonlite::fromJSON(rawToChar(main_resp$content))$predictions
